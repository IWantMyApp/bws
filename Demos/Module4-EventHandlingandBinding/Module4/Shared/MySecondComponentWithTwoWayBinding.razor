@*TODO: One-Way Data Binding*@
Current count in MySecondComponent with Two-Way Data Binding: @CurrentCounterValue
<br />
<button class="btn btn-primary" @onclick=UpdateCurrentCounterValue>Child Increment Button</button>

@*<select @onchange="UpdateCurrentFood">
    <option value="1">Rice</option>
    <option value="2">Hamburger</option>
    <option value="3">Soup</option>
    <option value="4">Pizza</option>
</select>*@


@code {
    //[Parameter]
    //public string Food { get; set; }

    //[Parameter]
    //public EventCallback<string> FoodChanged { get; set; }


    [Parameter]
    public int CurrentCounterValue { get; set; }

    // TODO: Two-Way binding - comment this out when demonstrating overriding default event handler when binding to parameters
    //[Parameter]
    //public EventCallback<int> CurrentCounterValueChanged { get; set; }

    // TODO: Two-Way binding - Uncomment to demonstrate overriding default event handler when binding to parameters
    [Parameter]
    public EventCallback<int>MyEventHandler { get; set; }



    async Task UpdateCurrentCounterValue()
    {
        CurrentCounterValue++;

        // TODO: Two-Way binding - comment this out when demonstrating overriding default event handler when binding to parameters
        //await CurrentCounterValueChanged.InvokeAsync(CurrentCounterValue);

        // TODO: Two-Way binding - Uncomment to demonstrate overriding default event handler when binding to parameters
        await MyEventHandler.InvokeAsync(CurrentCounterValue*2);
    }

    //void DoStuff(ChangeEventArgs e)
    //{
    //    selectedString = e.Value.ToString();
    //    Console.WriteLine("It is definitely: " + selectedString);
    //}


    //async Task UpdateCurrentFood(ChangeEventArgs e)
    //{
    //    Food = e.Value.ToString();
    //    // TODO: Two-Way binding - comment this out when demonstrating overriding default event handler when binding to parameters
    //    await FoodChanged.InvokeAsync(Food);

    //}

}
