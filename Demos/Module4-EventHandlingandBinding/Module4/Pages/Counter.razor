@page "/counter"
<h1>Counter</h1>

@*TODO: One-Way Data Binding *@
Current count in parent: @currentCount
<br />
<!--TODO: One-Way Data Binding - Button without Conditional Attribute-->
<!--<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>-->
<!--TODO: One-Way Data Binding - Conditional Attribute-->
<!--TODO: Event Handling -->
<button class="btn btn-primary" disabled="@(currentCount >= 5)" @onclick="IncrementCount">Parent Increment Button</button>

<br />
<br />

@*TODO: One-Way Data Binding *@
<MySecondComponent CurrentCounterValue=currentCount />

<br />
<br />


@*TODO: Two-Way binding - comment this out when demonstrating overriding default event handler when binding to parameters *@
@*<MySecondComponentWithTwoWayBinding @bind-CurrentCounterValue=currentCount />*@

@*TODO: Two-Way binding - Uncomment to demonstrate overriding default event handler when binding to parameters *@
<MySecondComponentWithTwoWayBinding @bind-CurrentCounterValue=currentCount @bind-CurrentCounterValue:event="MyEventHandler"/>


@*Uncomment this if you want to see the Two-Way Data Binding – Component Parameters demo working with a dropdown*@
@*<MySecondComponentWithTwoWayBinding @bind-Food=food/>

    Here is the selected food: @food*@

<br />
<br />


@*TODO: Two-Way Data Binding - By default the event fired is onchange,which fires when the element loses focus*@
<label>Event Fired 'onchange' (waits until focus is lost): </label>
<input @bind="currentCount" />

<br />

@*TODO: Two-Way Data Binding - oninput fires when the value of the text box changes*@
<label>Event Fired 'oninput': </label>
<input @bind-value="currentCount" @bind-value:event="oninput" />

<br />



@code {
    private int currentCount = 0;

    private string food;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRender lifecycle hook called - firstRender");
        }
        else
        {
            Console.WriteLine("OnAfterRender lifecycle hook called");
        }
    }




}
