@page "/invokedotnetwithgc"

@inject IJSRuntime JSRuntime

@implements IDisposable

<h1>Text received</h1>

<ul>
    @foreach (string text in TextHistory)
    {
        <li>@text</li>
    }
</ul>

@code
{
    List<string> TextHistory = new List<string>();
    DotNetObjectReference<InvokeDotNetFromJSWithGarbageCollection> ObjectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            ObjectReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("sut.startRandomGenerator", ObjectReference);
        }
    }


    [JSInvokable("AddText")]
    public void AddTextToTextHistory(string text)
    {
        TextHistory.Add(text.ToString());
        while (TextHistory.Count > 10)
            TextHistory.RemoveAt(0);
        StateHasChanged();
        System.Diagnostics.Debug.WriteLine("DotNet: Received " + text);
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
        if (ObjectReference != null)
        {
            //Now dispose the object reference so the component can be garbage collected
            ObjectReference.Dispose();
        }
    }

}